// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarInfo.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarInfo.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define CarInfoType_max_cdr_typesize 280ULL;
#define gps_max_cdr_typesize 16ULL;
#define CarInfoType_max_key_cdr_typesize 0ULL;
#define gps_max_key_cdr_typesize 0ULL;

CarInfoType::CarInfoType()
{
    // short m_speed
    m_speed = 0;
    // string m_dummy
    m_dummy ="";
    // gps m_coords


}

CarInfoType::~CarInfoType()
{



}

CarInfoType::CarInfoType(
        const CarInfoType& x)
{
    m_speed = x.m_speed;
    m_dummy = x.m_dummy;
    m_coords = x.m_coords;
}

CarInfoType::CarInfoType(
        CarInfoType&& x) noexcept 
{
    m_speed = x.m_speed;
    m_dummy = std::move(x.m_dummy);
    m_coords = std::move(x.m_coords);
}

CarInfoType& CarInfoType::operator =(
        const CarInfoType& x)
{

    m_speed = x.m_speed;
    m_dummy = x.m_dummy;
    m_coords = x.m_coords;

    return *this;
}

CarInfoType& CarInfoType::operator =(
        CarInfoType&& x) noexcept
{

    m_speed = x.m_speed;
    m_dummy = std::move(x.m_dummy);
    m_coords = std::move(x.m_coords);

    return *this;
}

bool CarInfoType::operator ==(
        const CarInfoType& x) const
{

    return (m_speed == x.m_speed && m_dummy == x.m_dummy && m_coords == x.m_coords);
}

bool CarInfoType::operator !=(
        const CarInfoType& x) const
{
    return !(*this == x);
}

size_t CarInfoType::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return CarInfoType_max_cdr_typesize;
}

size_t CarInfoType::getCdrSerializedSize(
        const CarInfoType& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.dummy().size() + 1;

    current_alignment += gps::getCdrSerializedSize(data.coords(), current_alignment);

    return current_alignment - initial_alignment;
}

void CarInfoType::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_speed;
    scdr << m_dummy.c_str();
    scdr << m_coords;

}

void CarInfoType::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_speed;
    dcdr >> m_dummy;
    dcdr >> m_coords;
}

/*!
 * @brief This function sets a value in member speed
 * @param _speed New value for member speed
 */
void CarInfoType::speed(
        int16_t _speed)
{
    m_speed = _speed;
}

/*!
 * @brief This function returns the value of member speed
 * @return Value of member speed
 */
int16_t CarInfoType::speed() const
{
    return m_speed;
}

/*!
 * @brief This function returns a reference to member speed
 * @return Reference to member speed
 */
int16_t& CarInfoType::speed()
{
    return m_speed;
}

/*!
 * @brief This function copies the value in member dummy
 * @param _dummy New value to be copied in member dummy
 */
void CarInfoType::dummy(
        const std::string& _dummy)
{
    m_dummy = _dummy;
}

/*!
 * @brief This function moves the value in member dummy
 * @param _dummy New value to be moved in member dummy
 */
void CarInfoType::dummy(
        std::string&& _dummy)
{
    m_dummy = std::move(_dummy);
}

/*!
 * @brief This function returns a constant reference to member dummy
 * @return Constant reference to member dummy
 */
const std::string& CarInfoType::dummy() const
{
    return m_dummy;
}

/*!
 * @brief This function returns a reference to member dummy
 * @return Reference to member dummy
 */
std::string& CarInfoType::dummy()
{
    return m_dummy;
}
/*!
 * @brief This function copies the value in member coords
 * @param _coords New value to be copied in member coords
 */
void CarInfoType::coords(
        const gps& _coords)
{
    m_coords = _coords;
}

/*!
 * @brief This function moves the value in member coords
 * @param _coords New value to be moved in member coords
 */
void CarInfoType::coords(
        gps&& _coords)
{
    m_coords = std::move(_coords);
}

/*!
 * @brief This function returns a constant reference to member coords
 * @return Constant reference to member coords
 */
const gps& CarInfoType::coords() const
{
    return m_coords;
}

/*!
 * @brief This function returns a reference to member coords
 * @return Reference to member coords
 */
gps& CarInfoType::coords()
{
    return m_coords;
}


size_t CarInfoType::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return CarInfoType_max_key_cdr_typesize;
}

bool CarInfoType::isKeyDefined()
{
    return false;
}

void CarInfoType::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

